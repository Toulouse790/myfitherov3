export class ServiceWorkerManager {
  private static instance: ServiceWorkerManager;
  private registration: ServiceWorkerRegistration | null = null;
  private updateAvailable = false;

  static getInstance(): ServiceWorkerManager {
    if (!ServiceWorkerManager.instance) {
      ServiceWorkerManager.instance = new ServiceWorkerManager();
    }
    return ServiceWorkerManager.instance;
  }

  async register(): Promise<void> {
    if (!('serviceWorker' in navigator)) {
      console.warn('‚ö†Ô∏è Service Worker non support√© par ce navigateur');
      return;
    }

    try {
      console.log('üîß Enregistrement du Service Worker...');
      
      this.registration = await navigator.serviceWorker.register('/sw.js', {
        scope: '/'
      });

      console.log('‚úÖ Service Worker enregistr√©:', this.registration.scope);

      // √âcoute les mises √† jour
      this.registration.addEventListener('updatefound', () => {
        this.handleUpdateFound();
      });

      // V√©rifie les mises √† jour
      await this.checkForUpdates();

      // √âcoute les messages du Service Worker
      navigator.serviceWorker.addEventListener('message', (event) => {
        this.handleMessage(event);
      });

      // Nettoyage p√©riodique du cache (toutes les heures)
      setInterval(() => {
        this.cleanupCache();
      }, 60 * 60 * 1000);

    } catch (error) {
      console.error('‚ùå Erreur enregistrement Service Worker:', error);
    }
  }

  private handleUpdateFound(): void {
    if (!this.registration?.installing) return;

    const installingWorker = this.registration.installing;
    console.log('üîÑ Mise √† jour du Service Worker d√©tect√©e...');

    installingWorker.addEventListener('statechange', () => {
      if (installingWorker.state === 'installed') {
        if (navigator.serviceWorker.controller) {
          // Mise √† jour disponible
          this.updateAvailable = true;
          console.log('üì¢ Mise √† jour du Service Worker pr√™te');
          this.notifyUpdateAvailable();
        } else {
          // Premier install
          console.log('‚úÖ Service Worker install√© pour la premi√®re fois');
        }
      }
    });
  }

  private async checkForUpdates(): Promise<void> {
    if (!this.registration) return;

    try {
      await this.registration.update();
      console.log('üîç V√©rification des mises √† jour Service Worker');
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur v√©rification mise √† jour:', error);
    }
  }

  private handleMessage(event: MessageEvent): void {
    const { data } = event;
    
    switch (data?.type) {
      case 'CACHE_UPDATED':
        console.log('üì¶ Cache mis √† jour:', data.url);
        break;
      case 'OFFLINE_FALLBACK':
        console.log('üì¥ Mode hors ligne activ√©');
        break;
      default:
        console.log('üì® Message Service Worker:', data);
    }
  }

  private notifyUpdateAvailable(): void {
    // Notification visuelle (toast) pour l'utilisateur
    if (window.dispatchEvent) {
      window.dispatchEvent(new CustomEvent('sw-update-available'));
    }
  }

  async applyUpdate(): Promise<void> {
    if (!this.updateAvailable || !this.registration?.waiting) {
      console.warn('‚ö†Ô∏è Aucune mise √† jour disponible');
      return;
    }

    console.log('üîÑ Application de la mise √† jour...');
    
    // Dit au Service Worker en attente de prendre le contr√¥le
    this.registration.waiting.postMessage({ type: 'SKIP_WAITING' });
    
    // Recharge la page apr√®s mise √† jour
    window.location.reload();
  }

  async cleanupCache(): Promise<void> {
    if (!this.registration?.active) return;

    console.log('üßπ Demande de nettoyage du cache...');
    this.registration.active.postMessage({ type: 'CLEAN_CACHE' });
  }

  // V√©rifications de statut
  isSupported(): boolean {
    return 'serviceWorker' in navigator;
  }

  isRegistered(): boolean {
    return !!this.registration;
  }

  isUpdateAvailable(): boolean {
    return this.updateAvailable;
  }

  // Statistiques
  async getCacheStats(): Promise<any> {
    if (!('caches' in window)) return null;

    try {
      const cacheNames = await caches.keys();
      const stats = {
        cacheCount: cacheNames.length,
        caches: {}
      };

      for (const cacheName of cacheNames) {
        const cache = await caches.open(cacheName);
        const keys = await cache.keys();
        stats.caches[cacheName] = {
          entryCount: keys.length,
          urls: keys.map(key => key.url)
        };
      }

      return stats;
    } catch (error) {
      console.error('‚ùå Erreur statistiques cache:', error);
      return null;
    }
  }

  // Force une synchronisation
  async forceSync(): Promise<void> {
    if (!('serviceWorker' in navigator) || !('sync' in window.ServiceWorkerRegistration.prototype)) {
      console.warn('‚ö†Ô∏è Background Sync non support√©');
      return;
    }

    try {
      const registration = await navigator.serviceWorker.ready;
      // Type assertion pour l'API Background Sync exp√©rimentale
      await (registration as any).sync.register('force-sync');
      console.log('üîÑ Synchronisation forc√©e demand√©e');
    } catch (error) {
      console.error('‚ùå Erreur synchronisation:', error);
    }
  }
}

// Instance singleton
export const serviceWorkerManager = ServiceWorkerManager.getInstance();
