
export class BundleOptimizer {
  private loadedModules = new Set<string>();
  private pendingLoads = new Map<string, Promise<any>>();
  private moduleStats = new Map<string, { loadTime: number; size?: number }>();
  private static instance: BundleOptimizer;

  // Singleton pattern pour partager l'√©tat
  static getInstance(): BundleOptimizer {
    if (!BundleOptimizer.instance) {
      BundleOptimizer.instance = new BundleOptimizer();
    }
    return BundleOptimizer.instance;
  }

  async loadModuleOptimized(moduleName: string): Promise<any> {
    console.log(`üîÑ Tentative de chargement optimis√©: ${moduleName}`);
    
    // √âvite double chargement
    if (this.loadedModules.has(moduleName)) {
      console.log(`‚ö° Module ${moduleName} d√©j√† en m√©moire`);
      return;
    }

    // √âvite chargements parall√®les du m√™me module
    if (this.pendingLoads.has(moduleName)) {
      console.log(`‚è≥ Attente du chargement en cours: ${moduleName}`);
      return await this.pendingLoads.get(moduleName);
    }

    const startTime = Date.now();
    const loadPromise = this.dynamicImport(moduleName);
    this.pendingLoads.set(moduleName, loadPromise);

    try {
      const module = await loadPromise;
      const loadTime = Date.now() - startTime;
      
      this.loadedModules.add(moduleName);
      this.moduleStats.set(moduleName, { loadTime });
      this.pendingLoads.delete(moduleName);
      
      console.log(`‚úÖ Module ${moduleName} charg√© en ${loadTime}ms`);
      return module;
    } catch (error) {
      this.pendingLoads.delete(moduleName);
      console.error(`‚ùå √âchec du chargement de ${moduleName}:`, error);
      throw error;
    }
  }

  private async dynamicImport(moduleName: string): Promise<any> {
    const moduleMap: Record<string, () => Promise<any>> = {
      'workout': () => import('@/pages/Workout'),
      'nutrition': () => import('@/pages/Nutrition'),
      'sleep': () => import('@/pages/Sleep'),
      'coach': () => import('@/pages/Coach'),
      'dashboard': () => import('@/pages/Dashboard'),
      'settings': () => import('@/pages/Settings'),
      'profile': () => import('@/pages/Profile'),
      'onboarding': () => import('@/pages/Onboarding'),
      'achievements': () => import('@/pages/Achievements')
    };

    const importFn = moduleMap[moduleName];
    if (!importFn) {
      throw new Error(`Module ${moduleName} non trouv√© dans la map`);
    }

    return await importFn();
  }

  // Pr√©chargement intelligent bas√© sur priorit√©
  async preloadByPriority(): Promise<void> {
    console.log('üöÄ D√©marrage du pr√©chargement par priorit√©...');
    
    const priorities = {
      high: ['workout', 'nutrition'], // Modules les plus utilis√©s
      medium: ['sleep', 'coach', 'dashboard'], // Usage moyen
      low: ['settings', 'profile', 'achievements'] // Usage occasionnel
    };

    try {
      // Charge haute priorit√© en premier (bloquant)
      console.log('üìà Chargement modules haute priorit√©...');
      for (const module of priorities.high) {
        await this.loadModuleOptimized(module);
      }

      // Charge moyenne priorit√© en arri√®re-plan (non-bloquant)
      setTimeout(async () => {
        console.log('üìä Chargement modules moyenne priorit√©...');
        for (const module of priorities.medium) {
          this.loadModuleOptimized(module).catch(error => 
            console.warn(`√âchec pr√©chargement ${module}:`, error)
          );
        }
      }, 1000);

      // Charge basse priorit√© encore plus tard
      setTimeout(async () => {
        console.log('üìã Chargement modules basse priorit√©...');
        for (const module of priorities.low) {
          this.loadModuleOptimized(module).catch(error => 
            console.warn(`√âchec pr√©chargement ${module}:`, error)
          );
        }
      }, 5000);

    } catch (error) {
      console.error('‚ùå Erreur dans le pr√©chargement par priorit√©:', error);
    }
  }

  // Pr√©chargement contextuel bas√© sur la navigation
  async preloadContextual(currentModule: string): Promise<void> {
    const contextualMap: Record<string, string[]> = {
      'workout': ['nutrition', 'coach'], // Apr√®s workout, souvent nutrition ou coach
      'nutrition': ['workout', 'sleep'], // Apr√®s nutrition, souvent workout ou sleep
      'sleep': ['nutrition', 'dashboard'], // Apr√®s sleep, souvent nutrition ou dashboard
      'coach': ['workout', 'nutrition'], // Coach sugg√®re workout/nutrition
      'dashboard': ['workout', 'nutrition', 'sleep'] // Dashboard m√®ne partout
    };

    const contextualModules = contextualMap[currentModule] || [];
    console.log(`üéØ Pr√©chargement contextuel pour ${currentModule}:`, contextualModules);

    // Pr√©charge avec d√©lai pour ne pas impacter la performance
    setTimeout(() => {
      contextualModules.forEach(module => {
        if (!this.loadedModules.has(module)) {
          this.loadModuleOptimized(module).catch(error => 
            console.warn(`√âchec pr√©chargement contextuel ${module}:`, error)
          );
        }
      });
    }, 2000);
  }

  // V√©rification si un module est charg√©
  isModuleLoaded(moduleName: string): boolean {
    return this.loadedModules.has(moduleName);
  }

  // Statistiques des modules
  getModuleStats() {
    const stats = {
      loadedCount: this.loadedModules.size,
      pendingCount: this.pendingLoads.size,
      modules: Object.fromEntries(this.moduleStats)
    };
    
    console.log('üìä Statistiques des modules:', stats);
    return stats;
  }

  // Nettoyage des modules (si n√©cessaire pour la m√©moire)
  unloadModule(moduleName: string): void {
    if (this.loadedModules.has(moduleName)) {
      this.loadedModules.delete(moduleName);
      this.moduleStats.delete(moduleName);
      console.log(`üóëÔ∏è Module ${moduleName} d√©charg√©`);
    }
  }
}

// Instance singleton
export const bundleOptimizer = new BundleOptimizer();
