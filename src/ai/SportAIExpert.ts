
import { WeatherData } from '@/services/WeatherService';
import { SportRecommendationGenerator } from './sport/SportRecommendationGenerator';
import { NutritionRecommendationGenerator } from './sport/NutritionRecommendationGenerator';
import { Recommendation, UserProfile } from './sport/types';

export class SportAIExpert {
  
  /**
   * G√©n√®re des recommandations m√©t√©o simplifi√©es
   */
  generateWeatherRecommendations(weather: WeatherData, userProfile?: UserProfile): Recommendation[] {
    console.log(`ü§ñ G√©n√©ration recommandations sport pour ${weather.main?.temp}¬∞C`);
    
    const baseRecommendations = SportRecommendationGenerator.generateWeatherRecommendations(weather, userProfile);
    
    // Enrichissement simple avec informations de s√©curit√© de base
    return this.enrichWithBasicSafetyInfo(baseRecommendations);
  }

  /**
   * G√©n√®re des recommandations nutrition
   */
  generateNutritionRecommendations(weather: WeatherData, userProfile?: UserProfile): Recommendation[] {
    console.log(`üçé G√©n√©ration recommandations nutrition pour ${weather.main?.temp}¬∞C`);
    
    const baseRecommendations = NutritionRecommendationGenerator.generateNutritionRecommendations(weather, userProfile);
    
    return this.enrichWithBasicSafetyInfo(baseRecommendations);
  }

  private enrichWithBasicSafetyInfo(baseRecommendations: Recommendation[]): Recommendation[] {
    const enrichedRecommendations = [...baseRecommendations];
    
    // Ajout d'information de s√©curit√© g√©n√©rale simple
    enrichedRecommendations.unshift({
      type: 'info',
      title: 'üí° Conseils adapt√©s',
      message: 'Recommandations personnalis√©es selon la m√©t√©o.',
      icon: 'üõ°Ô∏è',
      priority: 'medium',
      riskLevel: 'safe'
    });
    
    return enrichedRecommendations;
  }
}

// Re-export types for backward compatibility
export type { Recommendation, UserProfile } from './sport/types';
